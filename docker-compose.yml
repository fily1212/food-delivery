services:
  postgres:
    image: postgres:15
    container_name: pg-orderdb
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - fooddelivery-net

  order-service:
    build: ./order-service
    ports:
      - "8090:8090"
    environment:
      # Sovrascrive le properties di Spring Boot
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order_db # Usa il nome del servizio 'postgres-db' come hostname!
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SERVICES_RESTAURANT_URL: http://restaurant-service:8091 # Usa il nome del servizio 'restaurant-service'
      SERVICES_ACCOUNTING_URL: http://accounting-service:8092 # Usa il nome del servizio 'accounting-service'
    depends_on:
      - postgres
      - restaurant-service
      - accounting-service
    networks:
      - fooddelivery-net

  restaurant-service:
    build: ./restaurant-service
    ports:
      - "8091:8091"
    networks:
      - fooddelivery-net

  accounting-service:
    build: ./accounting-service
    ports:
      - "8092:8092"
    networks:
      - fooddelivery-net

  rabbitmq:
    image: rabbitmq:3.11-management # Usa immagine con UI di management inclusa
    container_name: rabbitmq_container
    ports:
      - "5672:5672" # Porta AMQP standard
      - "15672:15672" # Porta per la Management UI
    environment:
    # Credenziali di default: guest/guest (ok per sviluppo locale)
     RABBITMQ_DEFAULT_USER: user
     RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Volume per persistere stato (config, messaggi non acked)
    networks:
      - fooddelivery-net
volumes:
  pgdata:
    driver: local

  rabbitmq_data:
    driver: local

networks:
  fooddelivery-net:
    driver: bridge
